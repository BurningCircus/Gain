/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#include "PluginProcessor.h"
#include "PluginEditor.h"


//==============================================================================
GainAudioProcessor::GainAudioProcessor()
{
    //Set starting values for all parameters here.
    userParams[masterBypass] = 0.0f; //not bypassed
    userParams[gain] = 1.0f; //unity gain
    userParams[polarity] = 1.0f; //not inverted
    
    //Push default parameter values.
    setParameter(gain, userParams[gain]);
    setParameter(polarity, userParams[polarity]);
}

GainAudioProcessor::~GainAudioProcessor()
{
}

//==============================================================================
const String GainAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

int GainAudioProcessor::getNumParameters()
{
    return totalNumParam;
}

float GainAudioProcessor::getParameter (int index)
{
    switch(index) {
        case masterBypass:
            return userParams[masterBypass];
        case gain:
            //pull gain value from mGain and return it
            userParams[gain] = mGain.getGain();
            return userParams[gain];
        case polarity:
            //pull polarity value from mGain and return it
            userParams[polarity] = mGain.getPolarity();
            return userParams[polarity];
        default:
            //return invalid index
            return 1.1f;
    }
}

void GainAudioProcessor::setParameter (int index, float newValue)
{
    switch(index) {
        case masterBypass:
            userParams[masterBypass] = newValue;
            break;
        case gain:
            userParams[gain] = newValue;
            mGain.setGain(userParams[gain]);
            break;
        case polarity:
            userParams[polarity] = newValue;
            mGain.setPolarity(userParams[polarity]);
            break;
        default:
            return; //return before UI update request; we don't need one.
    }
    
    RequestUIUpdate();
}

const String GainAudioProcessor::getParameterName (int index)
{
    switch(index) {
        case masterBypass:
            return "Master Bypass";
        case gain:
            return "Gain";
        case polarity:
            return "Polarity";
        default:
            return String::empty;
    }
}

const String GainAudioProcessor::getParameterText (int index)
{
    if(index >=0 && index < totalNumParam) {
        return String(userParams[index]); //convert the value of the parameter to a string and return it.
    }
    else {
        return String::empty;
    }
}

const String GainAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String GainAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool GainAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool GainAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool GainAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool GainAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool GainAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double GainAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int GainAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int GainAudioProcessor::getCurrentProgram()
{
    return 0;
}

void GainAudioProcessor::setCurrentProgram (int index)
{
}

const String GainAudioProcessor::getProgramName (int index)
{
    return String();
}

void GainAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void GainAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
}

void GainAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
}

void GainAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    //Check for incorrect channel configurations or bypass.
    if(getNumInputChannels() == 2 && !userParams[masterBypass]) {
        //We've got the correct channel count and we're not bypassed.
        //Time to apply DSP to the incoming audio.
        
        //pointers to buffers containing incoming audio.
        float* leftBuffer = buffer.getWritePointer(0);
        float* rightBuffer = buffer.getWritePointer(1);
        
        //For every sample in the buffer, send it through mGain's ClockProcess() function.
        //ClockProcess() is the function that actually applies DSP to the samples.
        long i;
        for(i = 0; i < buffer.getNumSamples(); ++i) {
            mGain.ClockProcess(&leftBuffer[i], &rightBuffer[i]);
        }
    }
}

//==============================================================================
bool GainAudioProcessor::hasEditor() const
{
    return true; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* GainAudioProcessor::createEditor()
{
    return new GainAudioProcessorEditor (*this);
}

//==============================================================================
void GainAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void GainAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new GainAudioProcessor();
}
